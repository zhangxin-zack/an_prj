<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scorer.client.dao.mysql_dao1.NoticeDao">

    <resultMap id="notice" type="com.scorer.client.entity.Notice">
        <result column="id" property="id"/>
        <result column="notice_title" property="noticTitle"/>
        <result column="notice_content" property="noticeContent"/>
        <result column="notice_date" property="noticeDate"/>
        <result column="class_id_split" property="classIdSplit"/>
        <result column="class_id" property="classId"/>
        <result column="from_to" property="fromTo"/>
        <result column="is_read" property="isRead"/>
    </resultMap>

    <resultMap id="dailyRecommend" type="com.scorer.client.entity.DailyRecommend">
        <result column="id" property="id"/>
        <result column="content" property="content"/>
        <result column="img_path" property="imgPath"/>
        <result column="img_url" property="imgUrl"/>
        <result column="publish_date" property="publishDate"/>
        <result column="type" property="type"/>
    </resultMap>

    <resultMap id="recommendCategory" type="com.scorer.client.entity.RecommendCategory">
        <result column="id" property="categoryId"/>
        <result column="category_name" property="categoryName"/>
    </resultMap>

    <select id="getNoticeCount" resultType="long">
        select count(id) from notice where 1=1
        <if test="searchs.classId != null and searchs.classId != ''">
            AND CONTAINS(class_id_split,#{searchs.classId})
        </if>
        <if test="searchs.formTo != null">
            AND from_to = #{searchs.formTo}
        </if>
    </select>

    <select id="getNoticeList" resultMap="notice">
        select id, notice_title, notice_content, notice_date,class_id_split,from_to, is_read,#{searchs.classId} AS class_id from notice where 1=1
        <if test="searchs.classId != null and searchs.classId != ''">
            AND CONTAINS(class_id_split,#{searchs.classId})
        </if>
        <if test="searchs.formTo != null">
            AND from_to = #{searchs.formTo}
        </if>
        <foreach collection="sort" index="index" item="item" open="ORDER BY" separator=",">
            ${item.field} ${item['type']}
        </foreach>
        LIMIT #{startIndex}, #{pageSize}
    </select>

    <select id="getNoticeById" resultMap="notice">
        SELECT
            id,
            notice_title,
            notice_content,
            notice_date
        FROM notice
        WHERE id = #{NoticeId}
    </select>

    <insert id="addNotice">
        insert into notice(class_id_split, notice_title, notice_content, notice_date, from_to)
        values (#{classIdSplit}, #{noticTitle}, #{noticeContent}, sysdate(), #{fromTo})
    </insert>

    <update id="updateNotice">
        update notice
        <set>
            <if test="classIds!= null">
                class_id_split = #{classIdSplit},
            </if>
            <if test="noticTitle!= null and noticTitle != ''">
                notice_title = #{noticTitle},
            </if>
            <if test="noticeContent!= null and noticeContent!= '' ">
                notice_content = #{noticeContent},
            </if>
            <if test="isRead!= null ">
                is_read = #{isRead},
            </if>
            notice_date = sysdate()
        </set>
        where id = #{id}
    </update>

    <delete id="deleteNotice">
        delete from notice where id in
        <foreach collection="list" item="noticeId" open="(" separator="," close=")">
            #{noticeId}
        </foreach>
    </delete>

    <select id="getDailyRecommendCount" resultType="long">
        select count(id) from daily_recommend where 1=1
        <if test="searchs.type != null">
            AND type = #{searchs.type}
        </if>
    </select>

    <select id="getDailyRecommendList" resultMap="dailyRecommend">
        select id, content, img_path, img_url, publish_date from daily_recommend where 1=1
        <if test="searchs.type != null">
            AND type = #{searchs.type}
        </if>
        order by publish_date desc
        LIMIT ${startIndex}, ${pageSize}
    </select>


    <insert id="addRecommendText">
        insert into daily_recommend(content, img_path, img_url, publish_date, type)
        values (#{content}, #{imgPath}, #{imgUrl}, sysdate(), #{type})
    </insert>

    <update id="updateRecommendText">
        update daily_recommend
        <set>
            <if test="content!= null and content != ''">
                content = #{content},
            </if>
            <if test="imgPath!= null and imgPath!= '' ">
                img_path = #{imgPath},
            </if>
            <if test="imgUrl!= null and imgUrl!= ''">
                img_url = #{imgUrl},
            </if>
            <if test="type!= null ">
                type = #{type},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteRecommendText">
        delete from daily_recommend where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>



    <select id="getRecommendCategoryCount" resultType="long">
        select count(id) from recommend_category where 1=1
    </select>

    <select id="getRecommendCategoryList" resultMap="recommendCategory">
        select id, category_name from recommend_category where 1=1
        LIMIT ${startIndex}, ${pageSize}
    </select>

    <insert id="addRecommendCategory">
        insert into recommend_category(category_name)
        values (#{categoryName})
    </insert>

    <update id="updateRecommendCategory">
        update recommend_category
        <set>
            <if test="categoryName!= null and categoryName != ''">
                category_name = #{categoryName},
            </if>
        </set>
        where id = #{categoryId}
    </update>

    <delete id="deleteRecommendCategory">
        delete from recommend_category where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>